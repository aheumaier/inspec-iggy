# returns negative of Terraform tfstate file coverage

require 'inspec/objects/control'
require 'inspec/objects/ruby_helper'
require 'inspec/objects/describe'

require 'inspec-iggy/file_helper'
require 'inspec-iggy/inspec_helper'
require 'inspec-iggy/terraform/parser'

module InspecPlugins::Iggy::Terraform
  class Negative

    # parse through the JSON and generate InSpec controls
    def self.parse_negative(tf_file, resource_path, platform)
      # parse the tfstate file to get the Terraform resources
      tfstate = InspecPlugins::Iggy::FileHelper.parse_json(tf_file)
      absolutename = File.absolute_path(tf_file)

      # take those Terraform resources and map to InSpec resources by name and keep all attributes
      # resources -> [{name1 -> {unfiltered_attributes}, name2 -> {unfiltered_attributes}]
      parsed_resources = InspecPlugins::Iggy::Terraform::Parser.parse_resources(tfstate, resource_path, platform)

      # subtract matched resources from all available resources
      negative_controls = parse_controls(parsed_resources, absolutename, platform)

      Inspec::Log.debug "Iggy::Terraform::Negative.parse_negative negative_controls = #{negative_controls}"
      negative_controls
    end

    def self.parse_controls(resources, absolutename, platform)
      controls = []

      # write out the iterators for things not found
      unmatched_resources = InspecPlugins::Iggy::InspecHelper.available_resource_iterators(platform).keys - resources.keys
      Inspec::Log.debug "Iggy::Terraform::Negative.parse_controls unmatched_resources #{unmatched_resources}"

      unmatched_resources.each do |unmatched|
        # get the iterator for the unmatched
        unresources = InspecPlugins::Iggy::InspecHelper.available_resource_iterators(platform)[unmatched]
        iterator = unresources['iterator']
        index = unresources['index']
        qualifiers = unresources['qualifiers']

        # insert new control based off the resource's ID
        ctrl = Inspec::Control.new
        ctrl.id = "NEGATIVE-#{iterator}"
        ctrl.title = "InSpec-Iggy NEGATIVE-#{iterator}"
        ctrl.descriptions[:default] = "NEGATIVE-#{iterator} from the source file #{absolutename}\nGenerated by InSpec-Iggy v#{InspecPlugins::Iggy::VERSION}"
        ctrl.impact = '1.0'

        describe = Inspec::Describe.new
        qualifier = [iterator, {}]
        # TODO look up the iterators instead
        if InspecPlugins::Iggy::InspecHelper.available_resource_qualifiers(platform).has_key?(unmatched)
          InspecPlugins::Iggy::InspecHelper.available_resource_qualifiers(platform)[unmatched].each do |parameter|
            Inspec::Log.debug "Iggy::Terraform::Negative.parse_controls #{unmatched}  qualifier found = #{parameter} MATCHED"
            value = resources[unmatched][resource_id][parameter.to_s] # pull value out of the tf attributes
            qualifier[1][parameter] = value
          end
        end
        describe.qualifier.push(qualifier)
        # other describe.qualifiers.push to create an extra method

        # THIS SHOULD CHECK TO VERIFY AN EMPTY LIST

      end

      # iterate over the resources types and their ids
      # resources.keys.each do |resource_type|
      #   resources[resource_type].keys.each do |resource_id|
      #     # insert new control based off the resource's ID
      #     ctrl = Inspec::Control.new
      #     ctrl.id = "#{resource_type}::#{resource_id}"
      #     ctrl.title = "InSpec-Iggy #{resource_type}::#{resource_id}"
      #     ctrl.descriptions[:default] = "#{resource_type}::#{resource_id} from the source file #{absolutename}\nGenerated by InSpec-Iggy v#{InspecPlugins::Iggy::VERSION}"
      #     ctrl.impact = '1.0'

      #     describe = Inspec::Describe.new

      #     case platform
      #     when 'aws'
      #     when 'azure'
      #     when 'gcp'
      #       qualifier = [resource_type, {}]
      #       if InspecPlugins::Iggy::InspecHelper.available_resource_qualifiers(platform).has_key?(resource_type)
      #         InspecPlugins::Iggy::InspecHelper.available_resource_qualifiers(platform)[resource_type].each do |parameter|
      #           Inspec::Log.debug "Iggy::Terraform::Negative.parse_controls #{resource_type}  qualifier found = #{parameter} MATCHED"
      #           value = resources[resource_type][resource_id][parameter.to_s] # pull value out of the tf attributes
      #           qualifier[1][parameter] = value
      #         end
      #       end
      #       describe.qualifier.push(qualifier)
      #     end

      #     # ensure the resource does not exist
      #     describe.add_test(nil, 'exist', nil)

      #     ctrl.add_test(describe)
      #     controls.push(ctrl)
      #   end
      # end
      Inspec::Log.debug "Iggy::Terraform::Negative.parse_controls controls = #{controls}"
      controls
    end

  end
end
